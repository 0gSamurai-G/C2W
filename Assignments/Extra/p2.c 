#include<stdio.h>
#include<stdlib.h>

int sum(int temp){
        int sum1=0;
        while(temp>0){
                int dig=temp%10;
                sum1+=(dig*dig);
                temp/=10;
        }return sum1;
}

int square(int temp){
        while(temp!=1 && temp!=4){
                temp=sum(temp);
        }return (temp==1);
}

int end(){

        char ch;
        printf("\nDo you want to continue (y/n):\n");
        getchar();
        scanf("%c",&ch);
        printf("\n");
        if(ch=='n' || ch=='N'){

                return 0;
        }else{return 1;}
}

int* prime(int* arr1,int size1){

        int index1=0,index2=0,size2=1,flag=1;
        int* arr3=malloc(sizeof(int));
        while(index1<size1){

                flag=1;
                for(int i=2;((i<arr1[index1])&&(arr1[index1]>1));i++){

                        if(arr1[index1]%i==0){

                                flag=0;
                                break;
                        }
                }if(flag==1 && arr1[index1]>1){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}


int* composite(int* arr1,int size1){

        int index1=0,index2=0,size2=1,flag=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                flag=0;
                for(int i=2;i<arr1[index1];i++){

                        if(arr1[index1]%i==0){

                                flag=1;
                                break;
                        }
                }if(flag==1 && arr1[index1]>1){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* strong(int* arr1,int size1){

        int index1=0,index2=0,size2=1,flag=1;
        int* arr3=malloc(sizeof(int));
        while(index1<size1){

                int fact,sum=0;
                int temp=arr1[index1];
                while(temp>0){

                        fact=1;
                        int dig=temp%10;

                        for(int i=2;i<=dig;i++){

                                fact*=i;
                        }sum+=fact;
                        temp/=10;
                }if(sum==arr1[index1]){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* armstrong(int* arr1,int size1){

        int index1=0,index2=0,size2=1,flag=1;
        int* arr3=malloc(sizeof(int));
        while(index1<size1){

                int sum=0,count=0;
                int temp=arr1[index1];
                while(temp>0){

                        count++;
                        temp/=10;

                }temp=arr1[index1];
                while(temp>0){

                        int dig=temp%10;
                        int num1=dig;
                        for(int i=0;i<count-1;i++){

                                num1*=dig;
                        }sum+=num1;
                        temp/=10;
                }
                if(sum==arr1[index1]){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* perfect(int* arr1,int size1){

        int index1=0,index2=0,size2=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                int sum=0;
                for(int i=1;i<arr1[index1];i++){

                        if(arr1[index1]%i==0){

                                sum+=i;
                        }
                }if(sum==arr1[index1]){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* efficient(int* arr1,int size1){//Abundant

        int index1=0,index2=0,size2=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                int sum=0;
                for(int i=1;i<=arr1[index1];i++){

                        if(arr1[index1]%i==0){

                                sum+=i;
                        }
                }if(sum>(2*arr1[index1])){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* deficient(int* arr1,int size1){

        int index1=0,index2=0,size2=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                int sum=0;
                for(int i=1;i<arr1[index1];i++){

                        if(arr1[index1]%i==0){

                                sum+=i;
                        }
                }if(sum<arr1[index1]){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* palindrome(int* arr1,int size1){

        int index1=0,index2=0,size2=1,flag=1;
        int* arr3=malloc(sizeof(int));
        while(index1<size1){

                int sum=0;
                int temp=arr1[index1];
                while(temp>0){

                        sum=(sum*10)+(temp%10);
                        temp/=10;

                }if(sum==arr1[index1]){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* palindromic_prime(int* arr1,int size1){

        int index1=0,index2=0,size2=1,flag=1;
        int* arr3=malloc(sizeof(int));
        while(index1<size1){

                flag=1;
                int flag1=0;
                for(int i=2;((i<arr1[index1])&&(arr1[index1]>1));i++){

                        if(arr1[index1]%i==0){

                                flag=0;
                                break;
                        }
                }int temp=arr1[index1],sum=0;
                while(temp>0){

                        sum=(sum*10)+(temp%10);
                        temp/=10;
                }if(sum==arr1[index1]) flag1=1;
                if(flag==1 && arr1[index1]>1 && flag1==1){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* harshad(int* arr1,int size1){

        int index1=0,index2=0,size2=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                int sum=0,temp=arr1[index1];
                while(temp>0){

                        sum+=temp%10;
                        temp/=10;
                }
                if(arr1[index1]%sum==0){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* automorphic(int* arr1,int size1){

        int index1=0,index2=0,size2=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                if(arr1[index1]%10==((arr1[index1])*(arr1[index1])%10)){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int* happy(int* arr1,int size1){

        int index1=0,index2=0,size2=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                int temp=arr1[index1],flag=1,sum1=0;
                if(square(arr1[index1])){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}


        int index1=0,index2=0,size2=1;
        int* arr3=malloc(size2*sizeof(int));
        while(index1<size1){

                int temp=arr1[index1],flag=1,sum1=0;
                if(!(square(arr1[index1]))){

                        arr3[index2]=arr1[index1];
                        index2++;
                        size2++;
                        arr3=realloc(arr3,size2*sizeof(int));
                }index1++;
        }arr3[index2]=-999;
        return arr3;
}

int main(){

        int size1,flag1=1,opt;
        printf("Enter the size of array:\n");
        scanf("%d",&size1);
        int* arr1=calloc(size1,sizeof(int));
        printf("Enter the elements of array:\n");
        for(int i=0;i<size1;i++){

                scanf("%d",&arr1[i]);
        }
        while(flag1){

                printf("\nSelect an option:\n");
                printf("1.Prime number\n");
                printf("2.Composite number\n");
                printf("3.Strong number\n");
                printf("4.Armstrong number\n");
                printf("5.Perfect number\n");
                printf("6.Efficent/Abundant number\n");
                printf("7.Deficient number\n");
                printf("8.Palindrome number\n");
                printf("9.Palindromic prime number\n");
                printf("10.Harshad number\n");
                printf("11.Automorphic number\n");
                printf("12.Happy number\n");
                printf("13.Sad number\n");
                printf("Your option:\n");
                scanf("%d",&opt);

                int correct=1;
                while(correct){
                if(opt<1 || opt>13){

                        printf("Invalid option\nRenter the option:\n");
                        scanf("%d",&opt);
                }else{correct=0;}
                }
                int* (*array[13])(int*,int)={prime,composite,strong,armstrong,perfect,efficient,deficient,palindrome,palindromic_prime,harshad,automorphic,happy,sad};
                int* arr2=array[opt-1](arr1,size1);
                int index1=0;
                while(arr2[index1]!=-999){

                        printf("|%d|",arr2[index1]);
                        index1++;
                }free(arr2);
                flag1=end();
        }if(flag1==0) free(arr1);
        return 0;

}